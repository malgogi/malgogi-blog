{"componentChunkName":"component---src-templates-docs-js","path":"/redis/key-event-notification","result":{"data":{"site":{"siteMetadata":{"title":"Malgogi blog","docsLocation":"https://github.com/malgogi/malgogi-blog/tree/master/content"}},"mdx":{"fields":{"id":"a8a6ddbf-3ecf-5bee-b307-a057ff80f2ff","title":"Redis Key Event Notification","slug":"/redis/key-event-notification"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Redis Key Event Notification\",\n  \"metaTitle\": \"Redis Key Event Notification\",\n  \"metaDescription\": \"Redis Key Event Notification\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Definition\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2.8.0 \\uC774\\uD6C4\\uC5D0 \\uCD94\\uAC00\\uB41C \\uAE30\\uB2A5\\uC785\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redis\\uC758 key \\uC774\\uBCA4\\uD2B8\\uC5D0 \\uB300\\uD55C notification\\uC744 \\uBC1B\\uC744 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uAE30\\uB2A5\\uC744 \\uC774\\uC6A9\\uD558\\uBA74 \\uC778\\uC99D\\uC5D0\\uC11C access token\\uC758 \\uB9CC\\uB8CC, \\uB610\\uB294 access token\\uC758 \\uB4F1\\uB85D \\uC2DC\\uC810 \\uB4F1\\uB4F1\\uC5D0 \\uB300\\uD574\\uC11C \\uC54C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD604\\uC7AC\\uB294 redis pub/sub layer\\uC5D0\\uC11C \\uC218\\uD589\\uB418\\uAE30 \\uB54C\\uBB38\\uC5D0 client conenction\\uC774 \\uB04A\\uACA8\\uC11C reconnecting \\uB420 \\uACBD\\uC6B0\\uC5D0\\uB294 \\uD574\\uB2F9 \\uC2DC\\uC810 \\uC0AC\\uC774\\uC5D0 \\uC77C\\uC5B4\\uB09C event\\uB4E4\\uC5D0 \\uB300\\uD574\\uC11C\\uB294 loss\\uAC00 \\uBC1C\\uC0DD\\uD558\\uAC8C \\uB429\\uB2C8\\uB2E4.\")), mdx(\"h2\", null, \"Some terminology\"), mdx(\"h3\", null, \"1. Event Types\"), mdx(\"p\", null, \"K     Keyspace events, published with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__keyspace@<db>__\"), \"prefix.\\nE     Keyevent events, published with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__keyevent@<db>__\"), \" prefix.\\ng     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\\n$     String commands\\nl     List commands\\ns     Set commands\\nh     Hash commands\\nz     Sorted set commands\\nx     Expired events (events generated every time a key expires)\\ne     Evicted events (events generated when a key is evicted for maxmemory)\\nA     Alias for g$lshzxe, so that the \\\"AKE\\\" string means all the events.\"), mdx(\"h2\", null, \"Getting Started\"), mdx(\"h3\", null, \"1. Redis setting\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"redis-cli\\n\\nCONFIG set notify-keyspace-events KElgx\\n\")), mdx(\"h3\", null, \"2. Prepare client\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gradle\"\n  }), \"compile 'io.lettuce:lettuce-core:5.2.2.RELEASE'\\n\")), mdx(\"h3\", null, \"3. Prepare Producer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Slf4j\\npublic class EventProducer implements Runnable {\\n    final RedisClient redisClient;\\n    StatefulRedisConnection<String, String> connection;\\n    AtomicBoolean stopped;\\n\\n    public EventProducer() {\\n        stopped = new AtomicBoolean(false);\\n        redisClient = RedisClient.create(\\\"redis://localhost:6379/0\\\");\\n        connection = redisClient.connect();\\n    }\\n\\n    public void stop() {\\n        stopped.set(true);\\n    }\\n\\n    private void stopInternal() {\\n        redisClient.shutdown();\\n    }\\n\\n    @Override\\n    public void run() {\\n        log.info(\\\"Start Producer\\\");\\n\\n        while(!stopped.get()) {\\n            try {\\n                Thread.currentThread().sleep(1000);\\n\\n                Event event = Event.builder()\\n                        .timestamp(System.currentTimeMillis())\\n                        .id(UUID.randomUUID().toString())\\n                        .build();\\n\\n                if(!connection.isOpen()) {\\n                    log.warn(\\\"Connection closed. Retry once.\\\");\\n                    connection = redisClient.connect();\\n                }\\n\\n                log.info(\\\"Generate event={}\\\", event);\\n                connection\\n                        .async()\\n                        .setex(event.getId(), 2, Long.toString(event.getTimestamp()));\\n\\n                log.info(\\\"Connecton task done.\\\");\\n            } catch (InterruptedException e) {\\n                log.error(\\\"interrupted\\\", e );\\n                stop();\\n            }\\n        }\\n\\n        log.info(\\\"Stopped event producer\\\");\\n        stopInternal();\\n    }\\n}\\n\\n\")), mdx(\"h3\", null, \"4. Prepare Consumer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Slf4j\\n@Component\\npublic class EventConsumer  {\\n\\n    final RedisClient redisClient;\\n    StatefulRedisPubSubConnection<String, String> connection;\\n\\n    @Autowired\\n    public EventConsumer() {\\n        redisClient = RedisClient.create(\\\"redis://localhost:6379/0\\\");\\n        connection = redisClient.connectPubSub();\\n    }\\n\\n    @PostConstruct\\n    public void run() {\\n        log.info(\\\"Add listener\\\");\\n        connection.addListener(new RedisPubSubListener<String,String>(){\\n            @Override\\n            public void message(String channel, String message) {\\n                log.info(\\\"Message from channel={}, message={}\\\", channel, message);\\n            }\\n\\n            @Override\\n            public void message(String pattern, String channel, String message) {\\n                log.info(\\\"Message from channel={}, message={}\\\", channel, message);\\n            }\\n\\n            @Override\\n            public void subscribed(String channel, long count) {\\n                log.info(\\\"Message from channel={}, count={}\\\", channel, count);\\n            }\\n\\n            @Override\\n            public void psubscribed(String pattern, long count) {\\n                log.info(\\\"Message from pattern={}, count={}\\\", pattern, count);\\n            }\\n\\n            @Override\\n            public void unsubscribed(String channel, long count) {\\n                log.info(\\\"Message from channel={}, count={}\\\", channel, count);\\n            }\\n\\n            @Override\\n            public void punsubscribed(String pattern, long count) {\\n                log.info(\\\"Message from pattern={}, count={}\\\", pattern, count);\\n            }\\n        });\\n\\n        RedisPubSubCommands<String, String> sync = connection.sync();\\n        sync.psubscribe(\\\"__key*__:*\\\");\\n    }\\n\\n    @PreDestroy\\n    void stopInternal() {\\n        redisClient.shutdown();\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#definition","title":"Definition"},{"url":"#some-terminology","title":"Some terminology","items":[{"url":"#1-event-types","title":"1. Event Types"}]},{"url":"#getting-started","title":"Getting Started","items":[{"url":"#1-redis-setting","title":"1. Redis setting"},{"url":"#2-prepare-client","title":"2. Prepare client"},{"url":"#3-prepare-producer","title":"3. Prepare Producer"},{"url":"#4-prepare-consumer","title":"4. Prepare Consumer"}]}]},"parent":{"relativePath":"redis/key-event-notification.md"},"frontmatter":{"metaTitle":"Redis Key Event Notification","metaDescription":"Redis Key Event Notification"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/javascript/ecma2020","title":"ECAMA 2020 Changes"}}},{"node":{"fields":{"slug":"/utils/intellij","title":"Intellij shortcut"}}},{"node":{"fields":{"slug":"/java/rxJava","title":"RxJava"}}},{"node":{"fields":{"slug":"/java/spring","title":"Spring"}}},{"node":{"fields":{"slug":"/java/spring/servlet","title":"Servlet"}}},{"node":{"fields":{"slug":"/java/spring/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/java","title":"java"}}},{"node":{"fields":{"slug":"/utils","title":"utils"}}},{"node":{"fields":{"slug":"/java/rxJava/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/java/spring/handlerMethodArgumentResolver","title":"HandlerMethodArgumentResolver"}}},{"node":{"fields":{"slug":"/redis","title":"redis"}}},{"node":{"fields":{"slug":"/redis/setup","title":"setup"}}},{"node":{"fields":{"slug":"/redis/key-event-notification","title":"Redis Key Event Notification"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a8a6ddbf-3ecf-5bee-b307-a057ff80f2ff"}}}