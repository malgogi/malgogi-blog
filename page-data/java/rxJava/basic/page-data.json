{"componentChunkName":"component---src-templates-docs-js","path":"/java/rxJava/basic","result":{"data":{"site":{"siteMetadata":{"title":"Malgogi blog","docsLocation":"https://github.com/malgogi/malgogi-blog/tree/master/content"}},"mdx":{"fields":{"id":"effdb886-a5b6-5648-8313-70ad6e664dbe","title":"Basic","slug":"/java/rxJava/basic"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Basic\",\n  \"metaTitle\": \"RXJava Basic\",\n  \"metaDescription\": \"본 문서는 RxJava의 git을 구조로 설명합니다.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"RxJava\\uB780?\"), mdx(\"p\", null, \"\\uACF5\\uC2DD git \\uAE30\\uC900\\uC73C\\uB85C \\uB2E4\\uC74C\\uACFC \\uAC19\\uC774 \\uC124\\uBA85 \\uB418\\uC5B4 \\uC788\\uC2B5\\uB2C8\\uB2E4.\\nReactive programming\\uC758 java extension.\\nObservable sequence\\uB4E4\\uC744 \\uD1B5\\uD574\\uC11C async, event-based\\uB97C \\uAD6C\\uC131\\uD569\\uB2C8\\uB2E4.\"), mdx(\"h2\", null, \"Setting\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gradle\"\n  }), \"implementation \\\"io.reactivex.rxjava3:rxjava:3.0.0\\\"\\n\")), mdx(\"h2\", null, \"Test\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"package com.malgogi.tutorial.test;\\n\\nimport io.reactivex.rxjava3.core.*;\\n\\npublic class TestApplication {\\n    public static void main(String[] args) {\\n        Flowable.just(\\\"Hello world\\\").subscribe(System.out::println);\\n        Flowable.just(\\\"Hello\\\",\\\"world\\\").subscribe(System.out::println);\\n\\n        //It will throw NPE.\\n        Flowable.just(\\\"Hello\\\", null).subscribe(System.out::println);\\n    }\\n}\\n\")), mdx(\"h2\", null, \"Some Terminology\"), mdx(\"h3\", null, \"Upstream, Downstream\"), mdx(\"p\", null, \"\\uB2E4\\uC74C\\uACFC \\uAC19\\uC774 source\\uC5D0, 0~N\\uAC1C\\uC758 operator\\uB97C \\uBD99\\uC774\\uB294 \\uD615\\uD0DC\\uB85C \\uB3D9\\uC791\\uD569\\uB2C8\\uB2E4.\\n\\uC774 \\uB54C\\uC758 opertator \\uAE30\\uC900\\uC73C\\uB85C\\uB294 source\\uCABD\\uC774 upstream, consumer\\uCABD\\uC744 downstream\\uC73C\\uB85C \\uB3D9\\uC791\\uD569\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"source.operator1().operator2().operator3().subscribe(consumer);\\nsource.flatMap(value -> source.operator1().operator2().operator3());\\n\")), mdx(\"h3\", null, \"Backpressure\"), mdx(\"p\", null, \"DataFlow\\uAC00 \\uB3D9\\uC791\\uD560 \\uB54C\\uB294 \\uAC01\\uAC01\\uC758 asynchronous step\\uC5D0\\uC11C\\uB294 \\uAC01\\uC790 \\uB2E4\\uB978 \\uC18D\\uB3C4\\uB85C \\uD0DC\\uC2A4\\uD06C\\uB97C \\uC218\\uD589\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0, \\uBB38\\uC81C\\uAC00 \\uC0DD\\uAE38 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC774\\uB97C \\uC9C0\\uC6D0\\uD558\\uAE30 \\uC704\\uD574\\uC11C\\n\\uBA54\\uBAA8\\uB9AC\\uC5D0 buffering\\uC744 \\uB450\\uAC70\\uB098, \\uB610\\uB294 skip, drop\\uD558\\uB294 backpressure\\uAE30\\uB2A5\\uC744 \\uC81C\\uACF5\\uD569\\uB2C8\\uB2E4.\"), mdx(\"p\", null, \"RxJava\\uC5D0\\uC11C\\uB294 Flowable\\uC740 \\uD574\\uB2F9 \\uB0B4\\uC6A9\\uC744 \\uC9C0\\uC6D0\\uD558\\uACE0, Observable\\uC740 \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\\ningle, Maybe and Completable \\uB610\\uD55C \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public abstract class Flowable<@NonNull T> implements Publisher<T> {\\n    /** The default buffer size. */\\n    static final int BUFFER_SIZE;\\n    static {\\n        BUFFER_SIZE = Math.max(1, Integer.getInteger(\\\"rx3.buffer-size\\\", 128));\\n    }\\n    ....\\n}\\n\")), mdx(\"p\", null, \"\\uC544\\uB9C8 \\uD574\\uB2F9 BUFFER_SIZE\\uAC00 buffering\\uC744 \\uC9C0\\uC6D0\\uD558\\uB294 \\uAC83\\uC73C\\uB85C \\uBCF4\\uC785\\uB2C8\\uB2E4. \", mdx(\"br\", null), \"\\n\\uB610\\uB294 \\uC5F0\\uC0B0\\uC790\\uC5D0 buffer size\\uB97C \\uC9C0\\uC815\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"h3\", null, \"Assembly Time\"), mdx(\"p\", null, \"\\uB370\\uC774\\uD130\\uAC00 \\uC2E4\\uC9C8\\uC801\\uC73C\\uB85C \\uBC18\\uC601\\uB418\\uC9C0 \\uC54A\\uACE0, flow\\uC744 \\uC870\\uD569\\uD558\\uB294 \\uC791\\uC5C5\\uC744 assembly time\\uC774\\uB77C\\uACE0 \\uD569\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Flowable<Integer> flow = Flowable.range(1, 1000)\\n                .map(v -> v * v)\\n                .filter(v -> v % 3 == 0);\\n\\n        System.out.println(\\\"Before execute\\\");\\n        flow.subscribe(System.out::println);\\n        System.out.println(\\\"After execute\\\");\\n\")), mdx(\"h3\", null, \"Subscription Time\"), mdx(\"p\", null, \"\\uC2E4\\uC9C8\\uC801\\uC73C\\uB85C processing step\\uC774 \\uC5F0\\uACB0\\uB418\\uB294 \\uB0B4\\uBD80\\uC758 \\uC784\\uC2DC \\uC0C1\\uD0DC\\uC785\\uB2C8\\uB2E4.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"doOnSubscribe()\"), \" \\uAC00 \\uD638\\uCD9C\\uB418\\uBA70, source\\uC5D0\\uC11C \\uBC14\\uB85C \\uB370\\uC774\\uD130\\uAC00 emit\\uD560 \\uC218\\uB3C4 \\uC788\\uACE0, block\\uB41C \\uC0C1\\uD0DC\\uC77C \\uC218\\uB3C4 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"h3\", null, \"Runtime\"), mdx(\"p\", null, \"\\uC2E4\\uC9C8\\uC801\\uC73C\\uB85C flow\\uAC00 \\uD65C\\uBC1C\\uD558\\uAC8C \\uD750\\uB974\\uB294 \\uC0C1\\uD0DC\\uC785\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Observable.create(emitter -> {\\n     while (!emitter.isDisposed()) {\\n         long time = System.currentTimeMillis();\\n         emitter.onNext(time);\\n         if (time % 2 != 0) {\\n             emitter.onError(new IllegalStateException(\\\"Odd millisecond!\\\"));\\n             break;\\n         }\\n     }\\n})\\n.subscribe(System.out::println, Throwable::printStackTrace);\\n\")), mdx(\"h3\", null, \"Background Computation\"), mdx(\"p\", null, \"RXJava\\uB294 Scheduler \\uAE30\\uB2A5\\uC744 \\uC81C\\uACF5\\uD558\\uBA70 Schedule thread\\uC5D0\\uC11C background task\\uB97C \\uC218\\uD589\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uB2E4\\uC74C\\uACFC \\uAC19\\uC774 thread\\uB97C \\uB530\\uB85C \\uC9C0\\uC815\\uD574\\uC11C \\uB123\\uC744 \\uC218\\uB3C4 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uB2E4\\uB9CC Thread\\uB97C \\uBC14\\uB85C \\uD638\\uCD9C\\uD558\\uB294 \\uAC83\\uC774 \\uC544\\uB2CC, Scheduler\\uC5D0 injection\\uC744 \\uD574\\uC8FC\\uB294 \\uD615\\uD0DC\\uB85C\\uC368 \\uC0AC\\uC6A9\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Executor subscriber = Executors.newSingleThreadExecutor(new ThreadFactory() {\\n            @Override\\n            public Thread newThread(Runnable r) {\\n                Thread t = new Thread(r);\\n                t.setName(\\\"subscriber thread\\\");\\n\\n                return t;\\n            }\\n        });\\n\\n        Executor observer = Executors.newSingleThreadExecutor(new ThreadFactory() {\\n            @Override\\n            public Thread newThread(Runnable r) {\\n                Thread t = new Thread(r);\\n                t.setName(\\\"observer thread\\\");\\n\\n                return t;\\n            }\\n        });\\n\\n\\n        Flowable.fromCallable(() -> {\\n            System.out.println(\\\"subscriber side\\\");\\n            System.out.println(Thread.currentThread().getName());\\n            Thread.sleep(3000 );\\n\\n            return \\\"Done Rx\\\";\\n        }).subscribeOn(Schedulers.from(subscriber))\\n                .observeOn(Schedulers.from(observer))\\n                .subscribe((item) -> {\\n                    System.out.println(\\\"observer side\\\");\\n                    System.out.println(Thread.currentThread().getName());\\n\\n                }, Throwable::printStackTrace);\\n\\n\\n        System.out.println(Thread.currentThread().getName());\\n        Thread.sleep(4000);\\n        System.out.println(\\\"Done main\\\");\\n\")), mdx(\"h3\", null, \"Schedulers\"), mdx(\"p\", null, \"RXJava\\uC5D0\\uC11C\\uB294 Thread\\uB97C \\uC0AC\\uC6A9\\uD560 \\uB54C, Schedule\\uC744 \\uC9C0\\uC6D0\\uC744 \\uD558\\uBA70 \\uBA87\\uAC00\\uC9C0 utility\\uB97C \\uC9C0\\uC6D0\\uD55C\\uB2E4.\"), mdx(\"h2\", null, \"\\uCD9C\\uCC98\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://reactivex.io/documentation/operators.html\"\n  }), \"Reactive X Operators\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://reactivex.io/\"\n  }), \"ReactiveX\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ReactiveX/RxJava\"\n  }), \"RxJava git\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#rxjava란","title":"RxJava란?"},{"url":"#setting","title":"Setting"},{"url":"#test","title":"Test"},{"url":"#some-terminology","title":"Some Terminology","items":[{"url":"#upstream-downstream","title":"Upstream, Downstream"},{"url":"#backpressure","title":"Backpressure"},{"url":"#assembly-time","title":"Assembly Time"},{"url":"#subscription-time","title":"Subscription Time"},{"url":"#runtime","title":"Runtime"},{"url":"#background-computation","title":"Background Computation"},{"url":"#schedulers","title":"Schedulers"}]},{"url":"#출처","title":"출처"}]},"parent":{"relativePath":"java/rxJava/basic.md"},"frontmatter":{"metaTitle":"RXJava Basic","metaDescription":"본 문서는 RxJava의 git을 구조로 설명합니다."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/java","title":"Java"}}},{"node":{"fields":{"slug":"/introduction","title":"Landing Page"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/javascript","title":"javascript"}}},{"node":{"fields":{"slug":"/javascript/index","title":"javascript"}}},{"node":{"fields":{"slug":"/utils/intellij","title":"Intellij shortcut"}}},{"node":{"fields":{"slug":"/javascript/ecma2020","title":"ECAMA 2020 Changes"}}},{"node":{"fields":{"slug":"/java/index","title":"Getting Started"}}},{"node":{"fields":{"slug":"/java/rxJava","title":"RxJava"}}},{"node":{"fields":{"slug":"/java/spring","title":"Spring"}}},{"node":{"fields":{"slug":"/java/spring/servlet","title":"Servlet"}}},{"node":{"fields":{"slug":"/java/rxJava/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/java/spring/basic","title":"Basic"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"effdb886-a5b6-5648-8313-70ad6e664dbe"}}}